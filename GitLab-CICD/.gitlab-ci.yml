include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml

variables:
  IMAGE_TAG: latest
  IMAGE_URI_DEV: $ECR_REPO_DEV/$IMAGE_DEV:$IMAGE_TAG
  IMAGE_URI: $ECR_REPO_URI:$IMAGE_TAG
  TAG_NAME: "${CI_PROJECT_NAME}_YYYY.MM.DD"
  ### Add below values/variables into the CICD variables:
  ###$AWS_ACCESS_KEY_ID
  ###$AWS_SECRET_ACCESS_KEY
  ###AWS_REGION
  ###$ECR_REPO_URI  
  ###IMAGE_DEV
  ###ECR_REPO_DEV

stages:
  - test
  - secret-detection
  - dependency_scanning
  - deploy-ecr  

sast:
  stage: test

secret_detection:
  stage: secret-detection

dependency-scanning:
  image: python:latest
  stage: dependency_scanning   
  before_script:     
    - echo "gemnasium-python scan"      
  script:      
    - if [ ! -f "requirements.txt" ]; then touch requirements.txt; fi 
    - pip install --upgrade pip && pip install safety     
    - pip install -r requirements.txt  # If you have a requirements file    
    - safety check -r requirements.txt --output json > gl-dependency-scanning-report.json
    - ls -lh   
  artifacts: 
    reports: 
      dependency_scanning: gl-dependency-scanning-report.json
    paths: 
      - gl-dependency-scanning-report.json
    expire_in: 1 week  
  allow_failure: true  
  
build-image-and-push:
  stage: deploy-ecr   
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:dind   
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  before_script:   
    - aws --version
    ###- cat /etc/os-release 
    - yum update && yum install -y git
    - git --version
    - amazon-linux-extras enable docker
    - yum install -y docker     
    - docker --version  
    - echo "Logging in to AWS..."
    - echo $AWS_ACCESS_KEY_ID
    - echo $AWS_REGION
    - echo $ECR_REPO_URI
    - echo $IMAGE_URI
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - aws --profile default sts get-caller-identity
    - echo "Fetching ECR login password..."
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPO_URI
  script:
    - echo "Building Docker image..."
    ###- docker build -t $IMAGE_URI .
    - echo $IMAGE_URI_DEV
    - docker build -t $IMAGE_DEV .
    - echo "Pushing Docker image to ECR..."
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REPO_DEV
    - docker tag $IMAGE_DEV $IMAGE_URI_DEV
    ###- docker push $IMAGE_URI
    - docker push $IMAGE_URI_DEV
  after_script:   
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
  allow_failure: true
  when: manual  
